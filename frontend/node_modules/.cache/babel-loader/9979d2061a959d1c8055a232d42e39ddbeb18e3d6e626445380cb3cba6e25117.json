{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sharo\\\\Desktop\\\\Ethnus\\\\News\\\\NewsAggregator\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const savedUser = localStorage.getItem('newsAggregatorUser');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      // Use username as email for backend\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: username,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.msg || 'Invalid credentials');\n      }\n      const userData = await response.json();\n      setUser(userData);\n      localStorage.setItem('newsAggregatorUser', JSON.stringify(userData));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message || 'Invalid credentials'\n      };\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: username,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.msg || 'Registration failed');\n      }\n      const userData = await response.json();\n      setUser(userData);\n      localStorage.setItem('newsAggregatorUser', JSON.stringify(userData));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message || 'Registration failed'\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST'\n      });\n    } catch (e) {\n      // Ignore errors on logout\n    }\n    setUser(null);\n    localStorage.removeItem('newsAggregatorUser');\n  };\n  const updateUser = updatedData => {\n    const updatedUser = {\n      ...user,\n      ...updatedData\n    };\n    setUser(updatedUser);\n    localStorage.setItem('newsAggregatorUser', JSON.stringify(updatedUser));\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateUser,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","login","username","password","response","fetch","method","headers","body","stringify","email","ok","errorData","json","msg","userData","setItem","success","error","console","message","register","name","logout","e","removeItem","updateUser","updatedData","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sharo/Desktop/Ethnus/News/NewsAggregator/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in from localStorage\r\n    const savedUser = localStorage.getItem('newsAggregatorUser');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      // Use username as email for backend\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email: username, password })\r\n      });\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.msg || 'Invalid credentials');\r\n      }\r\n      const userData = await response.json();\r\n      setUser(userData);\r\n      localStorage.setItem('newsAggregatorUser', JSON.stringify(userData));\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { success: false, error: error.message || 'Invalid credentials' };\r\n    }\r\n  };\r\n\r\n  const register = async (username, email, password) => {\r\n    try {\r\n      const response = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: username, email, password })\r\n      });\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.msg || 'Registration failed');\r\n      }\r\n      const userData = await response.json();\r\n      setUser(userData);\r\n      localStorage.setItem('newsAggregatorUser', JSON.stringify(userData));\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return { success: false, error: error.message || 'Registration failed' };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await fetch('/api/auth/logout', { method: 'POST' });\r\n    } catch (e) {\r\n      // Ignore errors on logout\r\n    }\r\n    setUser(null);\r\n    localStorage.removeItem('newsAggregatorUser');\r\n  };\r\n\r\n  const updateUser = (updatedData) => {\r\n    const updatedUser = { ...user, ...updatedData };\r\n    setUser(updatedUser);\r\n    localStorage.setItem('newsAggregatorUser', JSON.stringify(updatedUser));\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}