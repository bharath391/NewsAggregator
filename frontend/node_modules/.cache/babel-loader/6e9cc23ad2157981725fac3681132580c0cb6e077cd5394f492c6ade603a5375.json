{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sharo\\\\Desktop\\\\Ethnus\\\\News\\\\NewsAggregator\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const savedUser = localStorage.getItem('newsAggregatorUser');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      // In a real app, this would be an API call\n      // For now, we'll simulate with dummy data\n\n      // Commented out API call - replace with actual backend later\n      /*\r\n      const response = await axios.post('/api/auth/login', {\r\n        username,\r\n        password\r\n      });\r\n      const userData = response.data;\r\n      */\n\n      // Dummy user data for frontend testing - name based on username\n      const userData = {\n        id: 1,\n        name: username,\n        username: username,\n        email: `${username}@example.com`,\n        preferences: {\n          categories: ['technology', 'politics'],\n          sources: ['bbc', 'cnn'],\n          viewMode: 'grid'\n        },\n        settings: {\n          darkMode: false,\n          compactView: false,\n          articlesPerPage: 12,\n          notifications: {\n            breaking: true,\n            daily: true\n          }\n        }\n      };\n      setUser(userData);\n      localStorage.setItem('newsAggregatorUser', JSON.stringify(userData));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: 'Invalid credentials'\n      };\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      // In a real app, this would be an API call\n      // Commented out API call - replace with actual backend later\n      /*\r\n      const response = await axios.post('/api/auth/register', {\r\n        username,\r\n        email,\r\n        password\r\n      });\r\n      const userData = response.data;\r\n      */\n\n      // Dummy user data for frontend testing\n      const userData = {\n        id: Date.now(),\n        // Simple ID generation for demo\n        name: username,\n        username: username,\n        email,\n        preferences: {\n          categories: [],\n          sources: [],\n          viewMode: 'grid'\n        },\n        settings: {\n          darkMode: false,\n          compactView: false,\n          articlesPerPage: 12,\n          notifications: {\n            breaking: true,\n            daily: true\n          }\n        }\n      };\n      setUser(userData);\n      localStorage.setItem('newsAggregatorUser', JSON.stringify(userData));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('newsAggregatorUser');\n  };\n  const updateUser = updatedData => {\n    const updatedUser = {\n      ...user,\n      ...updatedData\n    };\n    setUser(updatedUser);\n    localStorage.setItem('newsAggregatorUser', JSON.stringify(updatedUser));\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateUser,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","login","username","password","userData","id","name","email","preferences","categories","sources","viewMode","settings","darkMode","compactView","articlesPerPage","notifications","breaking","daily","setItem","stringify","success","error","console","register","Date","now","logout","removeItem","updateUser","updatedData","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sharo/Desktop/Ethnus/News/NewsAggregator/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in from localStorage\r\n    const savedUser = localStorage.getItem('newsAggregatorUser');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      // In a real app, this would be an API call\r\n      // For now, we'll simulate with dummy data\r\n      \r\n      // Commented out API call - replace with actual backend later\r\n      /*\r\n      const response = await axios.post('/api/auth/login', {\r\n        username,\r\n        password\r\n      });\r\n      const userData = response.data;\r\n      */\r\n\r\n      // Dummy user data for frontend testing - name based on username\r\n      const userData = {\r\n        id: 1,\r\n        name: username,\r\n        username: username,\r\n        email: `${username}@example.com`,\r\n        preferences: {\r\n          categories: ['technology', 'politics'],\r\n          sources: ['bbc', 'cnn'],\r\n          viewMode: 'grid'\r\n        },\r\n        settings: {\r\n          darkMode: false,\r\n          compactView: false,\r\n          articlesPerPage: 12,\r\n          notifications: {\r\n            breaking: true,\r\n            daily: true\r\n          }\r\n        }\r\n      };\r\n\r\n      setUser(userData);\r\n      localStorage.setItem('newsAggregatorUser', JSON.stringify(userData));\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { success: false, error: 'Invalid credentials' };\r\n    }\r\n  };\r\n\r\n  const register = async (username, email, password) => {\r\n    try {\r\n      // In a real app, this would be an API call\r\n      // Commented out API call - replace with actual backend later\r\n      /*\r\n      const response = await axios.post('/api/auth/register', {\r\n        username,\r\n        email,\r\n        password\r\n      });\r\n      const userData = response.data;\r\n      */\r\n\r\n      // Dummy user data for frontend testing\r\n      const userData = {\r\n        id: Date.now(), // Simple ID generation for demo\r\n        name: username,\r\n        username: username,\r\n        email,\r\n        preferences: {\r\n          categories: [],\r\n          sources: [],\r\n          viewMode: 'grid'\r\n        },\r\n        settings: {\r\n          darkMode: false,\r\n          compactView: false,\r\n          articlesPerPage: 12,\r\n          notifications: {\r\n            breaking: true,\r\n            daily: true\r\n          }\r\n        }\r\n      };\r\n\r\n      setUser(userData);\r\n      localStorage.setItem('newsAggregatorUser', JSON.stringify(userData));\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return { success: false, error: 'Registration failed' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('newsAggregatorUser');\r\n  };\r\n\r\n  const updateUser = (updatedData) => {\r\n    const updatedUser = { ...user, ...updatedData };\r\n    setUser(updatedUser);\r\n    localStorage.setItem('newsAggregatorUser', JSON.stringify(updatedUser));\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}